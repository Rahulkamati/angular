name: Docker Build and Deploy

on:
  push:
    branches: [ main, dev-docker ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  
permissions:
  id-token: write
  contents: read
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate SSH key pair
        id: ssh-key
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          SSH_PUBLIC_KEY=$(cat ~/.ssh/id_rsa.pub)
          SSH_PUBLIC_KEY="${SSH_PUBLIC_KEY//'%'/'%25'}"
          SSH_PUBLIC_KEY="${SSH_PUBLIC_KEY//$'\n'/'%0A'}"
          SSH_PUBLIC_KEY="${SSH_PUBLIC_KEY//$'\r'/'%0D'}"
          echo "::set-output name=public_key::$SSH_PUBLIC_KEY"
          chmod 600 ~/.ssh/id_rsa

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      #     #${{ env.AWS_REGION }}
      # # - name: Log in to Amazon ECR
      # #   id: login-ecr
      # #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Build, tag, and push Docker image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: your-repository-name
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="ssh_public_key=${{ steps.ssh-key.outputs.public_key }}"

      - name: Get EC2 IP
        id: ec2-ip
        run: |
          EC2_IP=$(cd terraform && terraform output -raw instance_public_ip)
          echo "::set-output name=ip::$EC2_IP"

      - name: Wait for SSH to be available
        run: |
          timeout 300 bash -c 'until nc -w 1 ${{ steps.ec2-ip.outputs.ip }} 22 > /dev/null 2>&1; do echo "Waiting for SSH..."; sleep 2; done'

      - name: Add instance to known hosts
        run: |
          ssh-keyscan -H ${{ steps.ec2-ip.outputs.ip }} >> ~/.ssh/known_hosts

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Deploy with Ansible
        run: |
          cd ansible
          ansible-playbook -i "${{ steps.ec2-ip.outputs.ip }}," playbook.yml \
            -u ubuntu \
            --private-key ~/.ssh/id_rsa \
            -e "github_username=${{ github.repository_owner }} \
                github_token=${{ secrets.GITHUB_TOKEN }}" 
